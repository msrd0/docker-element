name: Docker
on:
  push:
    branches: [main]



jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target: 
          - i686-unknown-linux-musl
          - x86_64-unknown-linux-musl
          - arm-unknown-linux-musleabihf
          - armv7-unknown-linux-musleabihf
          - aarch64-unknown-linux-musl
    name: ${{ matrix.target }}
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        id: "rust-toolchain"
      - name: install cross
        uses: baptiste0928/cargo-install@v2
        with:
          crate: cross
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: "${{runner.os}} Target ${{ matrix.target }} Rust ${{steps.rust-toolchain.outputs.cachekey}} Lock ${{hashFiles('Cargo.lock')}}"
      - run: ELEMENT_VERSION=1.11.38 cross build --release --locked --target ${{ matrix.target }}
        env:
          RUST_BACKTRACE: 1
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.target }}"
          path: |
            target/${{ matrix.target }}/release/element


  download-element:
    runs-on: ubuntu-latest
    steps: 
      - name: install oxipng
        uses: baptiste0928/cargo-install@v2
        with:
          crate: oxipng
      - uses: actions/checkout@v3
      - name: download element
        run: |
          set -eo pipefail
          wget -qO element.tar.gz "https://github.com/vector-im/element-web/releases/download/v$ELEMENT_VERSION/element-v$ELEMENT_VERSION.tar.gz"
          wget -qO element.tar.gz.asc "https://github.com/vector-im/element-web/releases/download/v$ELEMENT_VERSION/element-v$ELEMENT_VERSION.tar.gz.asc"
          gpg --batch --import E95B7699E80B68A9EAD9A19A2BAA9B8552BD9047.key
          gpg --batch --verify element.tar.gz{.asc,}
          mkdir -p /opt/element
          tar xfz element.tar.gz --strip-components=1 -C /opt/element
          rm /opt/element/config.sample.json;
          find /opt/element -name '*.png' | while read file; do oxipng -o6 "$file"; done;
          find /opt/element -name '*.html' -or -name '*.js' -or -name '*.css' -or -name '*.html' -or -name '*.svg' -or -name '*.json' | while read file; do gzip -k9 "$file"; done
        env: 
          ELEMENT_VERSION: 1.11.38
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: "element"
          path: |
            /opt/element/
  docker:
    runs-on: ubuntu-latest
    needs: [build, download-element]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: github_artifacts
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ format('ghcr.io/{0}/element', github.repository_owner) }}
          tags: |
            type=raw,value=latest
            type=raw,value=1.11.38
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}}
          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8
